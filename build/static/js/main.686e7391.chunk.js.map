{"version":3,"sources":["components/walk.gif","components/walk-stop.jpg","components/Walker.tsx","components/Light.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Walker","props","React","useState","walking","setWalking","src","walk","walkStop","alt","style","width","type","icon","CaretRightOutlined","size","onClick","handleCheck","setTimeout","disabled","Light","OFF_COLOR","color","setColor","useEffect","timerId","on","twMax","twinkleDuration","twinkleInterval","tw_count","twinkle","setInterval","callback","clearInterval","duration","clearTimeout","className","App","currentLight","setCurrentLight","map","item","index","message","error","content","fontSize","marginTop","success","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,MAA0B,iCCA1B,MAA0B,sC,uBCwC1BA,MA9Bf,SAAgBC,GAEZ,MAA8BC,IAAMC,UAAS,GAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OACI,qCACA,qBAAKC,IAAKF,EAASG,EAAOC,EAAUC,IAAI,OAAOC,MAAO,CAACC,MAAO,SAC9D,cAAC,IAAD,CACIC,KAAK,UACLC,KAAM,cAACC,EAAA,EAAD,IACNC,KAAK,QACLC,QAhBS,YACTZ,GAAWH,EAAMgB,gBACjBZ,GAAW,GACXa,YAAW,WACPb,GAAW,KACZ,OAYHc,SAAUf,EALd,qBC6BOgB,MA3Cf,SAAenB,GAEX,IAAMoB,EAAY,QAElB,EAA0BnB,IAAMC,SAASF,EAAMqB,OAA/C,mBAAOA,EAAP,KAAcC,EAAd,KAoCA,OAlCArB,IAAMsB,WAAU,WACZ,IAAIC,EAA+B,KACnC,GAAGxB,EAAMyB,GAAI,CACTH,EAAStB,EAAMqB,OACf,IAAMK,EAAQ1B,EAAM2B,gBAAkB3B,EAAM4B,gBACxCC,EAAW,EACfL,EAAUP,YAAW,WACdjB,EAAM8B,QACLN,EAAUO,aAAY,WAClB,GAAGF,GAAYH,EAIX,OAHA1B,EAAMgC,WACNC,cAAcT,QACdF,EAASF,GAITE,EADDO,EAAW,EACD7B,EAAMqB,MAEND,GAEbS,MACD7B,EAAM4B,iBAET5B,EAAMgC,aAEXhC,EAAMkC,eAEM,OAAZV,GACCW,aAAaX,GAEjBF,EAASF,KAEd,CAACpB,EAAMyB,KAEH,qBAAKW,UAAS,sBAAiBf,M,cCsB3BgB,MApEf,WACC,MAAwCpC,IAAMC,SAAS,GAAvD,mBAAOoC,EAAP,KAAqBC,EAArB,KAoBMP,EAAW,WAChBO,GAAiBD,EAAa,GAAK,IAyBpC,OACC,sBAAKF,UAAU,MAAf,UACC,qBAAKA,UAAU,SAAf,SA/Ca,CACd,CACCf,MAAO,MACPI,IAAI,EACJK,SAAS,EACTH,gBAAiB,IACjBC,gBAAiB,IACjBM,SAAU,MAEX,CACCb,MAAO,QACPI,IAAI,EACJK,SAAS,EACTH,gBAAiB,IACjBC,gBAAiB,IACjBM,SAAU,OAiCDM,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,EAAD,CAECjB,GAAIa,IAAiBI,EACrBrB,MAAOoB,EAAKpB,MACZS,QAASW,EAAKX,QACdH,gBAAiBc,EAAKd,gBACtBC,gBAAiBa,EAAKb,gBACtBM,SAAUO,EAAKP,SACfF,SAAUA,GAPLU,QAWR,cAAC,EAAD,CAAQ1B,YAtCU,WACnB,OAAoB,IAAjBsB,GACFK,IAAQC,MAAM,CACbC,QAAS,+DACTpC,MAAO,CACNqC,SAAU,GACVC,UAAW,WAGN,IAEPJ,IAAQK,QAAQ,CACfH,QAAS,2EACTpC,MAAO,CACNqC,SAAU,GACVC,UAAW,WAGN,UCnCKE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.686e7391.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/walk.abcca8cc.gif\";","export default __webpack_public_path__ + \"static/media/walk-stop.b35ab683.jpg\";","import walk from './walk.gif';\nimport walkStop from './walk-stop.jpg';\nimport { Button } from 'antd';\nimport { CaretRightOutlined } from '@ant-design/icons';\nimport React from 'react';\n\ninterface WalkProps {\n    handleCheck: () => void,\n}\n\nfunction Walker(props: WalkProps){\n\n    const [walking, setWalking] = React.useState(false);\n\n    const handleGo = () => {\n        if(!walking && props.handleCheck()) {\n            setWalking(true);\n            setTimeout(() => {\n                setWalking(false);\n            }, 5000);\n        }\n    };\n\n    return (\n        <>\n        <img src={walking? walk : walkStop} alt=\"walk\" style={{width: '80%'}} />\n        <Button \n            type='primary' \n            icon={<CaretRightOutlined />} \n            size='large' \n            onClick={handleGo} \n            disabled={walking}\n        >\n            Go!\n        </Button>\n    \n        </>\n    )\n}\n\nexport default Walker;","import React from 'react';\n\ninterface LightProps {\n    color: string,\n    on: boolean,\n    twinkle: boolean,\n    twinkleDuration: number,\n    twinkleInterval: number,\n    duration: number,\n    callback: () => void,\n}\n\nfunction Light(props: LightProps) {\n\n    const OFF_COLOR = 'black';\n\n    const [color, setColor] = React.useState(props.color);\n\n    React.useEffect(() => {\n        let timerId: NodeJS.Timeout|null = null;\n        if(props.on) {\n            setColor(props.color);\n            const twMax = props.twinkleDuration / props.twinkleInterval;\n            let tw_count = 0;;\n            timerId = setTimeout(() => {\n                if(props.twinkle) {\n                    timerId = setInterval(() => {\n                        if(tw_count >= twMax) {\n                            props.callback();\n                            clearInterval(timerId as NodeJS.Timeout);\n                            setColor(OFF_COLOR);\n                            return;\n                        }\n                        if(tw_count % 2) {\n                            setColor(props.color);\n                        } else {\n                            setColor(OFF_COLOR);\n                        }\n                        tw_count++;\n                    }, props.twinkleInterval);\n                } else {\n                    props.callback();\n                }\n            }, props.duration);\n        } else {\n            if(timerId !== null) {\n                clearTimeout(timerId);\n            }\n            setColor(OFF_COLOR);\n        } // eslint-disable-next-line\n    }, [props.on]); \n\n    return <div className={`light color-${color}`}></div>;\n}\n\nexport default Light;","import React from 'react';\nimport Walker from './components/Walker';\nimport Light from './components/Light';\nimport { message } from 'antd';\nimport './App.css';\n\nfunction App() {\n\tconst [currentLight, setCurrentLight] = React.useState(0);\n\tconst lights = [\n\t\t{\n\t\t\tcolor: \"red\", //颜色\n\t\t\ton: false, // 开关\n\t\t\ttwinkle: true, // 最后是否闪烁\n\t\t\ttwinkleDuration: 4000, // 闪烁时间\n\t\t\ttwinkleInterval: 500, // 闪烁间隔\n\t\t\tduration: 15000, // 恒亮时间\n\t\t},\n\t\t{\n\t\t\tcolor: \"green\",\n\t\t\ton: false,\n\t\t\ttwinkle: true,\n\t\t\ttwinkleDuration: 4000,\n\t\t\ttwinkleInterval: 500,\n\t\t\tduration: 15000,\n\t\t},\n\t];\n\n\tconst callback = () => {\n\t\tsetCurrentLight((currentLight+1) % 2);\n\t};\n\n\tconst handleCheck = () => {\n\t\tif(currentLight === 0) {\n\t\t\tmessage.error({\n\t\t\t\tcontent: \"小朋友，你闯红灯啦！\",\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: 20,\n\t\t\t\t\tmarginTop: '12vh',\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn false;\n\t\t} else {\n\t\t\tmessage.success({\n\t\t\t\tcontent: \"真棒，遵守交规的好孩子！\",\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: 20,\n\t\t\t\t\tmarginTop: '12vh',\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"lights\">\n\t\t\t\t{lights.map((item, index) => (\n\t\t\t\t\t<Light \n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\ton={currentLight === index}\n\t\t\t\t\t\tcolor={item.color}\n\t\t\t\t\t\ttwinkle={item.twinkle}\n\t\t\t\t\t\ttwinkleDuration={item.twinkleDuration}\n\t\t\t\t\t\ttwinkleInterval={item.twinkleInterval}\n\t\t\t\t\t\tduration={item.duration}\n\t\t\t\t\t\tcallback={callback}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Walker handleCheck={handleCheck}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}